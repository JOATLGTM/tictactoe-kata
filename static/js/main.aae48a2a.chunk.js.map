{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game/Game.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","handleClick","history","state","length","slice","calculateWinner","playerOne","setState","concat","increment","prevState","pop","prevHistory","resetGame","Array","fill","status","current","winner","playersTurn","undoButton","resetButton","lines","a","b","c","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aae48a2a.chunk.js","sourcesContent":["import React from 'react'\nimport './square.css'\n\nexport default function Square(props) {\n    return (\n        <button className=\"square\" onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    )\n}\n","import React, { Component } from 'react'\nimport Square from '../Square/Square'\nimport './board.css'\n\nexport class Board extends Component {\n    renderSquare(i) {\n        return <Square \n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n        />;\n      }\n    \n      render() {\n        return (\n          <div>\n            <div className=\"board-row\">\n              {this.renderSquare(0)}\n              {this.renderSquare(1)}\n              {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(3)}\n              {this.renderSquare(4)}\n              {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(6)}\n              {this.renderSquare(7)}\n              {this.renderSquare(8)}\n            </div>\n          </div>\n        );\n      }\n}\n\nexport default Board\n","import React, { Component } from 'react'\nimport Board from '../Board/Board'\nimport './game.css'\n\nexport default class Game extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            playerOne: true,     \n            increment: 0   \n        }\n    }\n\n    handleClick = i => {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n          }\n        squares[i] = this.state.playerOne ? 'X' : 'O';\n        this.setState({\n          history: history.concat([{\n            squares: squares,\n          }]),\n            playerOne: !this.state.playerOne,\n            increment: history.length\n        });\n    }\n\n    prevState = () => {\n        this.state.history.pop();\n        let prevHistory = this.state.history\n        this.setState({\n            history: prevHistory,\n            increment: this.state.increment - 1,\n            playerOne: !this.state.playerOne\n        })\n    }\n\n    resetGame = () => {\n        this.setState({\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            playerOne: true,\n            increment: 0,\n        })\n      }\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1]\n        const winner = calculateWinner(current.squares);\n        let playersTurn = winner || this.state.increment === 9 ? '' : this.state.playerOne ? `Player one's turn` : `Player two's turn`\n        let undoButton = this.state.history.length === 1 ? '' : <button className=\"prevBtn\" onClick={() => this.prevState()}>UNDO</button>\n        let resetButton = this.state.increment === 9 || winner ? <button className=\"resetBtn\" onClick={() => this.resetGame()}>RESET</button> : ''\n        let status;\n        \n        if (winner) {\n            status = winner === 'X' ? 'Player One Wins!' : 'Player Two Wins!'\n        } else if (this.state.increment === 9 && !winner) {\n            status = 'Draw';\n        }\n\n        return (\n            <div className=\"game\">\n                <Board \n                    squares={current.squares}\n                    onClick={(i) => this.handleClick(i)}\n                />\n                <div className=\"controller\">\n                    <div className=\"player-prompt\">\n                        {playersTurn}\n                    </div>\n                    <div className=\"result\">\n                        {status}\n                    </div>\n                    <div className=\"controller-buttons\">\n                        {undoButton}\n                        {resetButton}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game/Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}